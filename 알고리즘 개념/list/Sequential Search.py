# 일렬로 되어 있는 자료를 순서대로 검색하는 방법
# 가장 간단하고 직관적인 검색 방법
# 배열이나 연결 리스트 등 순차구조로 구현된 자료구조에서 원하는 항목을 찾을 때 융요함
# 알고리즘이 단순하여 구현이 쉽지만, 검색 대산의 수가 많은 경우에는 수행시간이 급격히!! 증가하여 비효율적!!

# 2가지 경우
# 정렬된 경우
# 정렬되지 않은 경우

# 검색 과정
# 첫 번째 원소부터 순서대로 검색 대상과 키 값이 같은 원소가 있는지 비교하며 찾는다.
# 키 값이 동일한 원소를 찾으면 그 원소의 인덱스를 반환한다.
# 자료구조의 마지막에 이를 때까지 검색 대상을 찾지 못하면 검색 실패!

# 찾고자 하는 원소의 순서에 따라 비교회수가 결정됨

# 첫 번째 원소를 찾을 때는 1번 비교, 두 번째 원소를 찾을 때는 2번 비교
# 정렬되지 않은 자료에서의 순차 검색의 평균 비교회수
# (N+1)/2임
# 시간 복잡도 O(n)

# 정렬되지 않은 경우 구현 예

def SequentialSearch(a, n, key):
    i = 0
    while i < n and a[i] != key:
        i += 1
    if i < n:
        return i # 검색 완료!
    else:
        return -1 # 검색 실패!

# 정렬된 경우 구현 예

def SequentialSearch(a, n, key):
    i = 0
    while i < n and a[i] < key:
        i += 1
    if i < n and a[i] = key:
        return i # 검색 완료!
    else:
        return -1 # 검색 실패!

# 이진 검색(Binary Search)
# 자료듸 중앙에 있는 원소를 고른다.
# 중앙 원소의 값과 찾고자 하는 목표 값을 비교한다.
# 목표 값이 중앙 원소의 값보다 작으면, 자료의 왼쪽 반에 대해서 새로 검색을 수행하고
# 크다면, 자료의 오른쪽 반에 대해서 새로 검색을 수행한다.
# 찾고자 하는 값을 찾을 때까지 과정을 반복






